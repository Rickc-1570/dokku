#!/usr/bin/env bash
set -eo pipefail; [[ $DOKKU_TRACE ]] && set -x
source "$PLUGIN_PATH/common/functions"

APP="$2"; IMAGE="dokku/$APP"; IMAGE_SOURCE_TYPE="$3"; TMP_WORK_DIR="$4"
CACHE_DIR="$DOKKU_ROOT/$APP/cache"

pushd "$TMP_WORK_DIR" &> /dev/null

case "$IMAGE_SOURCE_TYPE" in
  buildstep)
    id=$(tar -c . | docker run -i -a stdin $DOKKU_IMAGE /bin/bash -c "mkdir -p /app && tar -xC /app")
    test "$(docker wait $id)" -eq 0
    docker commit $id $IMAGE > /dev/null
    [[ -d $CACHE_DIR ]] || mkdir $CACHE_DIR
    # *DEPRECATED* in v0.4.0: `pluginhook pre-build` will be removed in future releases
    pluginhook pre-build "$APP"
    pluginhook pre-build-buildstep "$APP"

    # *DEPRECATED* in v0.3.14: `pluginhook docker-args` will be removed in future releases
    # https://github.com/progrium/dokku/issues/896 & https://github.com/progrium/dokku/issues/906
    DOCKER_ARGS=$(: | pluginhook docker-args $APP build)
    DOCKER_ARGS+=$(: | pluginhook docker-args-build $APP)
    id=$(docker run -d -v $CACHE_DIR:/cache -e CACHE_PATH=/cache $DOCKER_ARGS $IMAGE /build/builder)
    docker attach $id
    test "$(docker wait $id)" -eq 0
    docker commit $id $IMAGE > /dev/null

    # *DEPRECATED* in v0.4.0: `pluginhook post-build` will be removed in future releases
    pluginhook post-build "$APP"
    pluginhook post-build-buildstep "$APP"
    ;;

  dockerfile)
    # extract first port from dockerfile
    DOCKERFILE_PORT=$(grep EXPOSE Dockerfile | head -1 | awk '{ print $2 }')
    [[ -n "$DOCKERFILE_PORT" ]] && dokku config:set-norestart $APP DOKKU_DOCKERFILE_PORT=$DOCKERFILE_PORT

    # sticking with same pattern of building app image before pre-build for now.
    docker build -t "$IMAGE" .
    # buildstep pluginhooks don't necessarily make sense for dockerfiles. call the new breed!!!
    pluginhook pre-build-dockerfile "$APP"
    pluginhook post-build-dockerfile "$APP"
    ;;

  *)
    dokku_log_fail "Building image source type $IMAGE_SOURCE_TYPE not supported!"
    ;;
esac
