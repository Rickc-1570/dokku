#!/usr/bin/env bash
set -eo pipefail; [[ $DOKKU_TRACE ]] && set -x
source "$PLUGIN_AVAILABLE_PATH/config/functions"

main() {
  declare desc="build phase"
  declare APP="$1" APP_IMAGE_NAME="$2" DOKKU_APP_TYPE="$3" TMP_WORK_DIR="$4" CACHE_DIR="$5"
  local APP_IMAGE_NAME CONTAINER_ID DOCKER_ARGS DOKKU_IMAGE

  if [[ "$DOKKU_APP_TYPE" != "herokuish" ]]; then
    return
  fi

  DOKKU_IMAGE="$(config_get "$APP" DOKKU_IMAGE || echo "$DOKKU_IMAGE")"
  CONTAINER_ID="$(tar -c . | docker run "$DOKKU_GLOBAL_RUN_ARGS" -i -a stdin "$DOKKU_IMAGE" /bin/bash -c "mkdir -p /app && tar -xC /app")"
  test "$(docker wait "$CONTAINER_ID")" -eq 0
  docker commit "$CONTAINER_ID" "$APP_IMAGE_NAME" > /dev/null
  [[ -d "$CACHE_DIR" ]] || mkdir -p "$CACHE_DIR"
  plugn trigger pre-build-buildpack "$APP"

  DOCKER_ARGS=$(: | plugn trigger docker-args-build "$APP" "$DOKKU_APP_TYPE")
  [[ "$DOKKU_TRACE" ]] && DOCKER_ARGS+=" -e TRACE=true "
  # shellcheck disable=SC2086
  CONTAINER_ID="$(docker run $DOKKU_GLOBAL_RUN_ARGS -d -v $CACHE_DIR:/cache -e CACHE_PATH=/cache $DOCKER_ARGS $APP_IMAGE_NAME /build)"
  docker attach "$CONTAINER_ID"
  test "$(docker wait "$CONTAINER_ID")" -eq 0
  docker commit "$CONTAINER_ID" "$APP_IMAGE_NAME" > /dev/null

  plugn trigger post-build-buildpack "$APP"
}

main "$@"
